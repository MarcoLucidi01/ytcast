#!/bin/sh
# See license file for copyright and license details.

# release: automate creation of a new vX.Y.Z tag version and release.

set -e

reltype="$1"
relbranch="master"
reldate="$(date +'%Y-%m-%d')"
progname="ytcast"
license="license"
readme="readme.md"
changelog="changelog.md"
editor="vim +8"

die() {
        echo "error:" "$@" >&2
        exit 1
}

if [ "$reltype" != "major" ] && [ "$reltype" != "minor" ] && [ "$reltype" != "patch" ]; then
        die "unknown release type \"$reltype\"\nusage: ./release major|minor|patch"
elif [ "$(git branch --show-current)" != "$relbranch" ]; then
        die "current branch is not $relbranch"
elif [ -n "$(git status --short --porcelain)" ]; then
        die "working tree is not clean"
fi

currversion="$(git describe --tags --abbrev=0)"
if ! echo "$currversion" | grep -q '^v[0-9]\+\.[0-9]\+\.[0-9]\+$'; then
        die "\"$currversion\": current tag version does not match vX.Y.Z format"
fi
relversion="$(echo "$currversion" \
 | cut -c 2- \
 | awk -v rel="$reltype" '
    BEGIN { FS="."; OFS="." }
    { printf "%s", "v" }
    rel == "major" { print $1+1, 0, 0 }
    rel == "minor" { print $1, $2+1, 0 }
    rel == "patch" { print $1, $2, $3+1 }
')"

sed "4i ## $relversion\n\n$reldate\n\n- WRITE CHANGELOG HERE (delete version to abort)\n" "$changelog" > "$changelog.tmp"
$editor "$changelog.tmp"
if ! grep -q "^## $relversion$" "$changelog.tmp"; then
        die "changelog aborted"
fi
mv "$changelog.tmp" "$changelog"

git add "$changelog"
git commit --message="$changelog: $relversion"
git tag "$relversion"

make clean
make cross-build
mkdir "archive.tmp"
cp "$license" "$readme" "$changelog" "archive.tmp"
for binname in "$progname-$relversion-"*; do
        # this doesn't consider binary name extensions like .exe
        mv "$binname" "archive.tmp/$progname"
        mv "archive.tmp" "$binname"
        tar -czf "$binname.tar.gz" "$binname"
        sha256sum "$binname.tar.gz" >> "$progname-$relversion-sha256-checksums.txt"
        mv "$binname" "archive.tmp"
done
rm -rf "archive.tmp"

printf "\nplease make sure that everything is all right, --amend now if you have to.\n"
while true; do
        printf "%s" "push to remote? [YES/NO] "
        read -r ans
        case "$ans" in
        "YES")
                break
                ;;
        "n" | "N" | "no" | "NO" | "No" | "nO")
                die "push aborted"
                ;;
        esac
done

git push
git push --tags

# TODO create release via github api
# TODO upload binary packages via github api
